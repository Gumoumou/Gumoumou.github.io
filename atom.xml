<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Gumoumou.github.io</id>
    <title>Gridea</title>
    <updated>2020-10-10T05:53:18.624Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Gumoumou.github.io"/>
    <link rel="self" href="https://Gumoumou.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://Gumoumou.github.io/images/avatar.png</logo>
    <icon>https://Gumoumou.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[Triplanar教程笔记]]></title>
        <id>https://Gumoumou.github.io/post/triplanar-jiao-cheng-bi-ji/</id>
        <link href="https://Gumoumou.github.io/post/triplanar-jiao-cheng-bi-ji/">
        </link>
        <updated>2020-10-10T05:35:07.000Z</updated>
        <content type="html"><![CDATA[<h1 id="triplanar笔记">Triplanar笔记</h1>
<p>这个笔记主要记录自<a href="https://catlikecoding.com/unity/tutorials/advanced-rendering/triplanar-mapping/">CatlikeCoding-Triplanar</a><br>
上面的文章很长而且有很多跟Triplanar无关的内容，其实triplanar和核心内容就是很简单的几行代码，所以看我这个笔记就可以了。</p>
<h2 id="什么是triplanar为什么要用triplanar">什么是Triplanar?为什么要用Triplanar?</h2>
<p>一般来说我们想要映射纹理到我们的模型上，可以用根据每个顶点的uv坐标来映射纹理。但这不是唯一的方法，而triplanar就是另一种映射贴图的方式。有时候，uv坐标映射的方式可能无法达到我们想要的效果（比如造成贴图拉伸）甚至根本没有uv坐标，这些情况大多在用代码生成模型时，动态改变模型时发生。Triplanar的原理就是用顶点位置作为uv坐标，用法线作为权重，来实现贴图的映射，因为映射已xyz三个平面分别映射，所以叫做tri-planar。</p>
<p>《A Short Hike》中的triplanar应用</p>
<figure data-type="image" tabindex="1"><img src="https://cdn.staticneo.com/ew/thumb/1/13/A_short_hike_gliding.jpg/662px-A_short_hike_gliding.jpg" alt="查看源图像" loading="lazy"></figure>
<h2 id="先放源码">先放源码</h2>
<pre><code class="language-c">Shader &quot;Custom/Triplanar&quot; {
	Properties {
        _TopTex(&quot;TopTexture&quot;, 2D) = &quot;white&quot; {}
        _SideTex(&quot;SideTexture&quot;, 2D) = &quot;white&quot; {}
        _BlendOffset(&quot;BlendOffset&quot;,Range(0,0.5)) = 0.25
        _BlendExponent (&quot;Blend Exponent&quot;, Range(1, 8)) = 2
	}
	SubShader {
        Tags { &quot;RenderType&quot;=&quot;Opaque&quot; }
		Pass {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            #include &quot;UnityStandardBRDF.cginc&quot;
            #include &quot;Assets/Plugins/GumouKit/cgincs/gfunc.cginc&quot;

            struct appdata
            {
                float4 vertex : POSITION;
                float3 normal:NORMAL;
            };
            struct v2f
            {
                float4 vertex : SV_POSITION;
                float3 normal:TEXCOORD1;
                float4 worldpos : TEXCOORD2;
            };

            fixed _BlendOffset;
            half _BlendExponent;
            sampler2D _TopTex;
            sampler2D _SideTex;
            float4 _TopTex_ST,_SideTex_ST;

            struct TriUV{
                float2 xUV,yUV,zUV;
            };
            TriUV GetTriUV (float4 worldpos) {
                TriUV triUV;
                triUV.xUV = worldpos.zy;
                triUV.yUV = worldpos.xz;
                triUV.zUV = worldpos.xy;
                return triUV;
            }
            fixed3 GetTriWeights(fixed3 normal){
                fixed3 weights = abs(normal);   //因为normal可能有负数
                weights = saturate(weights-_BlendOffset);   //控制权重
                weights = pow(weights,_BlendExponent);  //进一步控制权重
                return weights/(weights.x+ weights.y+ weights.z);   //使xyz相加=1
            }
            half3 SharpSplit(half3 blendmap){
                blendmap.r = step(0.1,blendmap.r - blendmap.g -blendmap.b );
                blendmap.g = step(0.1,blendmap.g - blendmap.r -blendmap.b );
                blendmap.b = step(0.1,blendmap.b - blendmap.r -blendmap.g );
                return blendmap;
            }

            v2f vert (appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.normal = UnityObjectToWorldNormal(v.normal);
                o.worldpos = mul(unity_ObjectToWorld,v.vertex);
                return o;
            }
            fixed4 frag (v2f i) : SV_Target
            {
                //triplanar
                TriUV triuv = GetTriUV(i.worldpos);
                fixed4 colx = tex2D(_SideTex,triuv.xUV * _SideTex_ST.xy + _SideTex_ST.zw);
                fixed4 coly = tex2D(_TopTex,triuv.yUV * _TopTex_ST.xy + _TopTex_ST.zw);
                fixed4 colz = tex2D(_SideTex,triuv.zUV * _SideTex_ST.xy + _SideTex_ST.zw);
                fixed3 weights = GetTriWeights(i.normal);
                fixed4 tricol = colx*weights.x + coly*weights.y +colz*weights.z;
                return tricol;
            }
            ENDCG
        }
    }
}
</code></pre>
<h2 id="用顶点位置作为uv坐标">用顶点位置作为uv坐标</h2>
<p>先来映射一个面</p>
<pre><code class="language-c">fixed4 frag (v2f i) : SV_Target
{
    fixed4 colx = tex2D(_SideTex,i.worldpos.zy);
    fixed4 coly = tex2D(_TopTex,i.worldpos.xz);
    fixed4 colz = tex2D(_SideTex,i.worldpos.xy);
    //return colx;
    //return colx;
    return colx;
}
</code></pre>
<img src="https://catlikecoding.com/unity/tutorials/advanced-rendering/triplanar-mapping/texturing-with-three-planes/xy.jpg" alt="img" style="zoom:50%;" />
<img src="https://catlikecoding.com/unity/tutorials/advanced-rendering/triplanar-mapping/texturing-with-three-planes/xz.jpg" alt="img" style="zoom: 50%;" />
<img src="https://catlikecoding.com/unity/tutorials/advanced-rendering/triplanar-mapping/texturing-with-three-planes/zy.jpg" alt="img" style="zoom:50%;" />
<p>可以写成一个函数方便使用</p>
<pre><code class="language-c">			struct TriUV{
                float2 xUV,yUV,zUV;
            };
            TriUV GetTriUV (float4 worldpos) {
                TriUV triUV;
                triUV.xUV = worldpos.zy;
                triUV.yUV = worldpos.xz;
                triUV.zUV = worldpos.xy;
                return triUV;
            }
            fixed4 frag (v2f i) : SV_Target
            {
            	TriUV triuv = GetTriUV(i.worldpos);
                fixed4 colx = tex2D(_SideTex,triuv.xUV);
                fixed4 coly = tex2D(_TopTex,triuv.yUV);
                fixed4 colz = tex2D(_SideTex,triuv.zUV);
            }
</code></pre>
<p>合在一起的效果</p>
<pre><code class="language-c">			fixed4 frag (v2f i) : SV_Target
            {
            	TriUV triuv = GetTriUV(i.worldpos);
                fixed4 colx = tex2D(_SideTex,triuv.xUV);
                fixed4 coly = tex2D(_TopTex,triuv.yUV);
                fixed4 colz = tex2D(_SideTex,triuv.zUV);
                return (colx+coly+colz)/3;
            }
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://catlikecoding.com/unity/tutorials/advanced-rendering/triplanar-mapping/texturing-with-three-planes/three-mappings.jpg" alt="img" loading="lazy"></figure>
<h2 id="用法线作为权重">用法线作为权重</h2>
<pre><code class="language-c">            fixed3 GetTriWeights(fixed3 normal){
                fixed3 weights = abs(normal);   //因为normal可能有负数
                return weights/(weights.x+ weights.y+ weights.z);   //使xyz相加=1
            }
</code></pre>
<pre><code class="language-c">			fixed4 frag (v2f i) : SV_Target
            {
            	.....
            	fixed3 weights = GetTriWeights(i.normal);
                fixed4 tricol = colx*weights.x + coly*weights.y +colz*weights.z;
                return tricol;
            }
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://catlikecoding.com/unity/tutorials/advanced-rendering/triplanar-mapping/texturing-with-three-planes/blending.jpg" alt="img" loading="lazy"></figure>
<p>控制权重</p>
<pre><code class="language-c">            Properties {
            	.....
                _BlendOffset(&quot;BlendOffset&quot;,Range(0,0.5)) = 0.25
            }
            .....
   			fixed _BlendOffset;
   			....
   			fixed3 GetTriWeights(fixed3 normal){
                fixed3 weights = abs(normal);   //因为normal可能有负数
                weights = saturate(weights-_BlendOffset);   //控制权重
                return weights/(weights.x+ weights.y+ weights.z);   //使xyz相加=1
            }
            ....
            fixed4 frag (v2f i) : SV_Target
            {
            	.....
            	fixed3 weights = GetTriWeights(i.normal);
                fixed4 tricol = colx*weights.x + coly*weights.y +colz*weights.z;
                return tricol;
            }
</code></pre>
<p><img src="https://Gumoumou.github.io/post-images/1602308353691.jpg" alt="" loading="lazy"><br>
<img src="https://Gumoumou.github.io/post-images/1602308440222.jpg" alt="" loading="lazy"></p>
<p>进一步控制权重</p>
<pre><code class="language-c">            Properties {
            	.....
                _BlendOffset(&quot;BlendOffset&quot;,Range(0,0.5)) = 0.25
                _BlendExponent (&quot;Blend Exponent&quot;, Range(1, 8)) = 2
            }
            .....
   			fixed _BlendOffset;
   			half _BlendExponent;
   			....
   			fixed3 GetTriWeights(fixed3 normal){
                fixed3 weights = abs(normal);   //因为normal可能有负数
                weights = saturate(weights-_BlendOffset);   //控制权重
                weights = pow(weights,_BlendExponent);  //进一步控制权重
                return weights/(weights.x+ weights.y+ weights.z);   //使xyz相加=1
            }
            ....
            fixed4 frag (v2f i) : SV_Target
            {
            	.....
            	fixed3 weights = GetTriWeights(i.normal);
                fixed4 tricol = colx*weights.x + coly*weights.y +colz*weights.z;
                return tricol;
            }
</code></pre>
<p><img src="https://Gumoumou.github.io/post-images/1602308467022.jpg" alt="" loading="lazy"><br>
<img src="https://Gumoumou.github.io/post-images/1602308470267.jpg" alt="" loading="lazy"></p>
<p>接下来我们可以试试映射多张贴图，我们y轴用_TopTex草地贴图，x和z轴用 _MainTex石头贴图。</p>
<pre><code>            Properties {
            	.....
                _MainTex (&quot;Texture&quot;, 2D) = &quot;white&quot; {}
                _TopTex(&quot;&quot;,2D) = &quot;white&quot;{}
            }
            ...
            fixed4 frag (v2f i) : SV_Target
            {
                fixed4 colx = tex2D(_MainTex,i.worldpos.zy);
                fixed4 coly = tex2D(_TopTex,i.worldpos.xz);
                fixed4 colz = tex2D(_MainTex,i.worldpos.xy);
             }
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://Gumoumou.github.io/post-images/1602308490570.jpg" alt="" loading="lazy"></figure>
<p>最后我们再实现一下纹理的缩放和位移</p>
<pre><code>float4 _MainTex_ST,_SideTex_ST;
.....
fixed4 frag (v2f i) : SV_Target
{
    fixed4 colx = tex2D(_MainTex,i.worldpos.zy * _MainTex_ST.xy + _MainTex_ST.zw);
    fixed4 coly = tex2D(_TopTex,i.worldpos.xz * _SideTex_ST.xy + _SideTex_ST.zw);
    fixed4 colz = tex2D(_MainTex,i.worldpos.xy * _MainTex_ST.xy + _MainTex_ST.zw);
    ...
}
</code></pre>
<p>把缩放设置为5看一下效果</p>
<figure data-type="image" tabindex="5"><img src="https://Gumoumou.github.io/post-images/1602308514087.jpg" alt="" loading="lazy"></figure>
<h1 id="完">完</h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://Gumoumou.github.io/post/hello-gridea/</id>
        <link href="https://Gumoumou.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>